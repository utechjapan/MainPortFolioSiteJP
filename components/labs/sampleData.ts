// components/labs/sampleData.ts
import { NetworkDevice, Connection, Location, TestResult } from '../../types/network';

export const initialDevices: NetworkDevice[] = [
  {
    id: 'router1',
    type: 'router',
    name: 'Edge Router',
    x: 400,
    y: 100,
    location: 'tokyo-office',
    interfaces: [
      { id: 'eth0', name: 'eth0', type: 'ethernet', ipAddress: '203.0.113.1', subnetMask: '255.255.255.0', status: 'up' },
      { id: 'eth1', name: 'eth1', type: 'ethernet', ipAddress: '192.168.1.1', subnetMask: '255.255.255.0', status: 'up' },
    ],
    config: {
      routes: [
        { destination: '0.0.0.0/0', nextHop: '203.0.113.254', metric: 1 },
        { destination: '192.168.2.0/24', nextHop: '192.168.1.2', metric: 10 },
      ],
      firewallRules: [],
    },
    status: 'online',
    icon: 'fa-network-wired',
    zIndex: 10,
    isDragging: false,
  },
  {
    id: 'switch1',
    type: 'switch',
    name: 'Core Switch',
    x: 400,
    y: 250,
    location: 'tokyo-office',
    interfaces: [
      { id: 'g0/1', name: 'GigabitEthernet0/1', type: 'ethernet', status: 'up' },
      { id: 'g0/2', name: 'GigabitEthernet0/2', type: 'ethernet', status: 'up' },
      { id: 'g0/3', name: 'GigabitEthernet0/3', type: 'ethernet', status: 'up' },
    ],
    config: { vlan: '1,10,20' },
    status: 'online',
    icon: 'fa-sitemap',
    zIndex: 9,
    isDragging: false,
  },
  {
    id: 'server1',
    type: 'server',
    name: 'Web Server',
    x: 200,
    y: 350,
    location: 'tokyo-office',
    interfaces: [
      { id: 'eth0', name: 'eth0', type: 'ethernet', ipAddress: '192.168.1.10', subnetMask: '255.255.255.0', status: 'up' },
    ],
    config: { gateway: '192.168.1.1', dns: ['8.8.8.8', '8.8.4.4'] },
    status: 'online',
    icon: 'fa-server',
    zIndex: 8,
    isDragging: false,
  },
  {
    id: 'firewall1',
    type: 'firewall',
    name: 'FortiGate',
    x: 600,
    y: 200,
    location: 'osaka-office',
    interfaces: [
      { id: 'wan1', name: 'WAN1', type: 'ethernet', ipAddress: '203.0.113.2', subnetMask: '255.255.255.0', status: 'up' },
      { id: 'lan1', name: 'LAN1', type: 'ethernet', ipAddress: '192.168.2.1', subnetMask: '255.255.255.0', status: 'up' },
    ],
    config: {
      firewallRules: [
        {
          id: 'rule1',
          action: 'allow',
          source: 'any',
          destination: '192.168.2.0/24',
          protocol: 'tcp',
          port: '80,443',
          description: 'Allow web traffic',
          enabled: true,
        },
      ],
      vpnConfig: {
        type: 'site-to-site',
        encryption: 'aes-256',
        remoteEndpoint: '203.0.113.1',
        localSubnets: ['192.168.2.0/24'],
        remoteSubnets: ['192.168.1.0/24'],
        status: 'connected',
      },
    },
    status: 'online',
    icon: 'fa-shield-alt',
    zIndex: 9,
    isDragging: false,
  },
  {
    id: 'client1',
    type: 'workstation',
    name: 'User PC',
    x: 300,
    y: 400,
    location: 'tokyo-office',
    interfaces: [
      { id: 'eth0', name: 'eth0', type: 'ethernet', ipAddress: '192.168.1.101', subnetMask: '255.255.255.0', status: 'up' },
    ],
    config: { gateway: '192.168.1.1', dns: ['8.8.8.8', '8.8.4.4'] },
    status: 'online',
    icon: 'fa-desktop',
    zIndex: 7,
    isDragging: false,
  },
  {
    id: 'client2',
    type: 'client',
    name: 'Remote User',
    x: 600,
    y: 350,
    location: 'osaka-office',
    interfaces: [
      { id: 'eth0', name: 'eth0', type: 'ethernet', ipAddress: '192.168.2.101', subnetMask: '255.255.255.0', status: 'up' },
    ],
    config: { gateway: '192.168.2.1', dns: ['8.8.8.8', '8.8.4.4'] },
    status: 'online',
    icon: 'fa-laptop',
    zIndex: 7,
    isDragging: false,
  },
];

export const initialConnections: Connection[] = [
  {
    id: 'conn1',
    from: { deviceId: 'router1', interfaceId: 'eth1' },
    to: { deviceId: 'switch1', interfaceId: 'g0/1' },
    type: 'ethernet',
    status: 'active',
    bandwidth: '1Gbps',
    color: '#3B82F6',
  },
  {
    id: 'conn2',
    from: { deviceId: 'switch1', interfaceId: 'g0/2' },
    to: { deviceId: 'server1', interfaceId: 'eth0' },
    type: 'ethernet',
    status: 'active',
    bandwidth: '1Gbps',
    color: '#3B82F6',
  },
  {
    id: 'conn3',
    from: { deviceId: 'switch1', interfaceId: 'g0/3' },
    to: { deviceId: 'client1', interfaceId: 'eth0' },
    type: 'ethernet',
    status: 'active',
    bandwidth: '1Gbps',
    color: '#3B82F6',
  },
  {
    id: 'conn4',
    from: { deviceId: 'router1', interfaceId: 'eth0' },
    to: { deviceId: 'firewall1', interfaceId: 'wan1' },
    type: 'vpn',
    status: 'active',
    bandwidth: '100Mbps',
    color: '#8B5CF6',
  },
  {
    id: 'conn5',
    from: { deviceId: 'firewall1', interfaceId: 'lan1' },
    to: { deviceId: 'client2', interfaceId: 'eth0' },
    type: 'ethernet',
    status: 'active',
    bandwidth: '1Gbps',
    color: '#EC4899',
  },
];

export const initialLocations: Location[] = [
  {
    id: 'tokyo-office',
    name: '東京オフィス',
    color: 'rgba(59,130,246,0.2)',
    x: 150,
    y: 50,
    width: 300,
    height: 400,
    devices: ['router1', 'switch1', 'server1', 'client1'],
  },
  {
    id: 'osaka-office',
    name: '大阪オフィス',
    color: 'rgba(236,72,153,0.2)',
    x: 550,
    y: 150,
    width: 200,
    height: 250,
    devices: ['firewall1', 'client2'],
  },
];

export const predefinedTests = [
  { name: 'Tokyo → Osaka Ping', source: 'client1', destination: 'client2', type: 'ping' },
  { name: 'Web Server Access', source: 'client2', destination: 'server1', type: 'http' },
  { name: 'Internet Connectivity', source: 'server1', destination: 'router1', type: 'ping' },
  { name: 'Full Network Scan', source: 'all', destination: 'all', type: 'traceroute' },
];
